(require (lib "graphics.ss""graphics"));cargar la libreria de graficos 
(require (lib "graphics"))
(open-graphics);abre los graficos de la galeria
(require racket/gui/base)
(define ventana (open-viewport "inicio" 800 630));se crea la ventana de inicio de ancho 800 y largo 600

((draw-viewport ventana) "black"); se establece como fondo en la ventana un color negro

((draw-pixmap ventana) "imagenes/Pacman1.png" (make-posn 87 95));se carga la imagen de inicio en la ventana de inicio

;-------------------------------------------------------------------------------------------------------------------
;barra carga en pantalla inicial
(define (barra n x y)
  (if (>= n 0)
      (begin
        ((draw-solid-rectangle ventana) (make-posn x y) 15 15 "yellow")
        (sleep 0.008)
        (barra (- n 1) (+ x 10) y)
        )
      ((draw-solid-rectangle ventana) (make-posn x y) 30 15 "yellow")
      )
  )

;en esta linea se define el codigo de inicio del juego a partir del boton play del menu 
(define (inicio)
  (begin
    (barra 63 68 520)
    (sleep 0.03)
    ((draw-solid-rectangle ventana)(make-posn 0 0) 800 600 "black")
    ((draw-pixmap ventana)"imagenes/menu.png" (make-posn 100 50)))
    
  )
(inicio)

(define (menu1)
((draw-pixmap ventana)"imagenes/menu.png" (make-posn 100 50)))


;------------------------------------------------------------------------------------------------------------------------
; se crea el menu del juego donde se encuentran los botones de ayuda, creditos y salida por medio de las
;posiciones en pantalla 
(define (menu2)
((draw-solid-rectangle ventana)(make-posn 0 0)800 600 "black")
((draw-pixmap ventana)"imagenes/help.png"(make-posn 80 80))
((draw-pixmap ventana)"imagenes/exit.png" (make-posn 600 500))
  )

(define (menu3)
((draw-solid-rectangle ventana)(make-posn 0 0)800 600 "black")
((draw-pixmap ventana)"imagenes/creditsm.png"(make-posn 10 10))
((draw-pixmap ventana)"imagenes/credits.png"(make-posn 150 130))
((draw-pixmap ventana)"imagenes/exit.png" (make-posn 650 560))
  )  

(define (click)
  (get-mouse-click ventana) 
  (define x (posn-x (query-mouse-posn ventana)))
  (define y (posn-y (query-mouse-posn ventana)))
  (display x)
  (newline)
  (display y)
  
  
   (if (and (>= x 185)(<= x 420) (>= y 300)(<= y 350))
         (menu2)
          )
  
    (if (and (>= x 185)(<= x 420) (>= y 380)(<= y 397))
         (menu3)
          )
  
   
    (if (and (>= x 600)(<= x 800) (>= y 400)(<= y 600))
        (begin
         ((draw-solid-rectangle ventana)(make-posn 0 0)800 600 "black")
         (menu1)
         ))

  (if (and (>= x 290)(<= x 400) (>= y 450)(<= y 500))
       (exit))
  
     (if (and (>= x 185)(<= x 420) (>= y 200)(<= y 250))
         ((draw-solid-rectangle ventana)(make-posn 0 0)800 600 "black")
         (click))
  )
   

(click)
;--------------------------------------------------------------------------------------------------
; se crea matriz del juego y se mapean los muros, enemigos,galletas y frutas

(define matriz (make-vector 15 0))
(define vecto1 (make-vector 15 1))
(define vecto2  (vector 1 0 3 0 0 0 0 1 0 0 0 0 0 3 1))
(define vecto3  (vector 1 0 1 0 1 1 0 1 0 1 1 0 1 0 1))
(define vecto4  (vector 1 0 0 7 0 0 0 0 0 0 0 0 0 0 1))
(define vecto5  (vector 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1))
(define vecto6  (vector 1 0 0 0 0 0 0 0 0 0 0 0 0 8 1))
(define vecto7  (vector 1 1 0 1 0 1 1 0 1 1 0 1 0 1 1))
(define vecto8  (vector 4 0 0 0 0 1 0 0 2 1 0 0 0 0 6))
(define vecto9  (vector 1 1 0 1 0 1 1 1 1 1 0 1 0 1 1))
(define vecto10 (vector 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
(define vecto11 (vector 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1))
(define vecto12 (vector 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1))
(define vecto13 (vector 1 0 1 1 1 1 0 1 0 1 1 1 1 0 1))
(define vecto14 (vector 1 3 0 0 0 0 0 5 0 0 0 0 0 3 1))
(define vecto15 (make-vector 15 1))

(define matriz (vector vecto1 vecto2 vecto3 vecto4 vecto5 vecto6  vecto7 vecto8 vecto9 vecto10 vecto11 vecto12  vecto13 vecto14 vecto15  ))

(define (mostrar vec i)
  (if (< i (vector-length vec ))
      (begin  
        (display (vector-ref vec i) )
        (newline)
        (mostrar vec (+ 1 i))
          
        )
      )
  )

;I ES FILA
;J ES COLUMNA 
(define (lleneuno1 vec i j)
  (if (< i (vector-length vec ))
      (begin          
        (if (< j (vector-length (vector-ref vec i) ))
         (begin                     
           
           (if (and(= i 3)(= j 3))
           (vector-set! (vector-ref vec i) j 6))                                    
           (lleneuno1 vec  i  (+ 1 j) ))                       
         (lleneuno1 vec  (+ 1 i) 0 )
        )
      )
  )
 )

(define (poner1 vec i j x y valor)
  (if (< i (vector-length vec ))
      (begin          
        (if (< j (vector-length (vector-ref vec i) ))
            (begin                                
              (if (and(= i x)(= j y))
                  (vector-set! (vector-ref vec i) j valor))                                      
              (poner1 vec  i  (+ 1 j) x y valor))                          
            (poner1 vec  (+ 1 i) 0  x y valor)
            )
        )
      )
  )



;en esta funcion se mapean los muros 
(define (mapeo vec i j)
  (if (< i (vector-length vec ))
      (begin          
        (if (< j (vector-length (vector-ref vec i) ))
         (begin                     
           
           (if (= (vector-ref(vector-ref vec i) j) 1)
           ((draw-pixmap ventana)"imagenes/prueba3.png" (make-posn (* j 53) (* i 40))))                                   
           
           
           (mapeo vec  i  (+ 1 j) ))                       
         (mapeo vec  (+ 1 i) 0 )
        )
      )
  )
 )





;en esta funcion se mapean las galletas 
(define (galleta vec i j)
  (if (< i (vector-length vec ))
      (begin          
        (if (< j (vector-length (vector-ref vec i) ))
         (begin                     
           
           (if (= (vector-ref(vector-ref vec i) j) 0)
           ((draw-pixmap ventana)"imagenes/galleta1.png" (make-posn (* j 53) (* i 40))))                                   
           
           
           (galleta vec  i  (+ 1 j) ))                       
         (galleta vec  (+ 1 i) 0 )
        )
      )
  )
 )

;en esta funcion se mapean las frutas 
(define (fruta vec i j)
  (if (< i (vector-length vec ))
      (begin          
        (if (< j (vector-length (vector-ref vec i) ))
         (begin                     
           
           (if (= (vector-ref(vector-ref vec i) j) 3)
           ((draw-pixmap ventana)"imagenes/fruta.png" (make-posn (* j 53) (* i 40))))                                   
           
           
           (fruta vec  i  (+ 1 j) ))                       
         (fruta vec  (+ 1 i) 0)
        )
      )
  )
 )

;en estas funcione se mapean los fantasmas 
(define (FA vec i j)
  (if (< i (vector-length vec ))
       (begin          
        (if (< j (vector-length (vector-ref vec i) ))
         (begin                     
           
           (if (= (vector-ref(vector-ref vec i) j) 2)
           ((draw-pixmap ventana)"imagenes/fantasmaazul/izquierda/1.png" (make-posn (* j 53) (* i 40))))
       
           
           
           
           (FA vec  i  (+ 1 j) ))                       
         (FA vec  (+ 1 i) 0)
        )
      )
  )
 )

(define (FRS vec i j)
  (if (< i (vector-length vec ))
       (begin          
        (if (< j (vector-length (vector-ref vec i) ))
         (begin                     
           
           (if (= (vector-ref(vector-ref vec i) j) 5)
           ((draw-pixmap ventana)"imagenes/fantasmarosado/derecha/2.png" (make-posn (* j 53) (* i 40))))
       
           
           
           
           (FRS vec  i  (+ 1 j) ))                       
         (FRS vec  (+ 1 i) 0)
        )
      )
  )
 )

(define (FR vec i j)
  (if (< i (vector-length vec ))
       (begin          
        (if (< j (vector-length (vector-ref vec i) ))
         (begin                     
           
           (if (= (vector-ref(vector-ref vec i) j) 7)
           ((draw-pixmap ventana)"imagenes/fantasmarojo/abajo/1.png" (make-posn (* j 53) (* i 40))))
       
           
           
           
           (FR vec  i  (+ 1 j) ))                       
         (FR vec  (+ 1 i) 0)
        )
      )
  )
 )
(define (FN vec i j)
  (if (< i (vector-length vec ))
       (begin          
        (if (< j (vector-length (vector-ref vec i) ))
         (begin                     
           
           (if (= (vector-ref(vector-ref vec i) j) 8)
           ((draw-pixmap ventana)"imagenes/fantasmanaranja/arriba/2.png" (make-posn (* j 53) (* i 40))))
       
           
           
           
           (FN vec  i  (+ 1 j) ))                       
         (FN vec  (+ 1 i) 0)
        )
      )
  )
 )

(poner1 matriz 0 0 4 9 0)

(mapeo matriz 0 0)
(galleta matriz 0 0)
(fruta matriz 0 0)
(FA matriz 0 0)
(FRS matriz 0 0)
(FR matriz 0 0)
(FN matriz 0 0)
(mostrar matriz 0)
;------------------------------------------------------------------------------------------------------
;se crea una cadena en una posicion x y para definir el puntaje 
((draw-string ventana) (make-posn 6 618) "SCORE" "yellow")
((draw-string ventana) (make-posn 60 618) ":" "yellow")
;------------------------------------------------------------------------------------------------------
;se cargan las imagenes de pacman en todos los lados sobre los cuales se movera para hacer el efecto
;de animacion
(define(pacman posx posy lad)
  (if (equal? lad 'u)
      (begin
        
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmana/1.png"(make-posn posx posy ))
        (sleep 0.1)
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmana/2.png"(make-posn posx posy ))
        (sleep 0.1)
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmana/3.png"(make-posn posx posy ))
         (sleep 0.1)) 
        
       (if (equal? lad 'd)
         (begin
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmanb/1.png"(make-posn posx  posy ))
        (sleep 0.1)
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmanb/2.png"(make-posn posx  posy ))
        (sleep 0.1)
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmanb/3.png"(make-posn posx  posy ))
         (sleep 0.1))
       
  (if (equal? lad 'l)
    (begin
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmani/1.png"(make-posn posx posy))
        (sleep 0.1)
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmani/2.png"(make-posn posx posy))
        (sleep 0.1)
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmani/3.png"(make-posn posx posy))
         (sleep 0.1))
       
    (if(equal? lad 'r)
    (begin
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmand/1.png"(make-posn posx posy))
        (sleep 0.1)
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmand/2.png"(make-posn posx posy))
        (sleep 0.1)
        ((draw-pixmap ventana)"imagenes/movimientospacman/Pacmand/3.png"(make-posn posx posy))
        (sleep 0.1))
        
     (void)
    
     )
   )
  )
 )
)
;----------------------------------------------------------------------------------------------------
;se define un vector para agregar y modificar el puntaje
(define aciertos (vector 0))
;se definen funciones que acumularan y sumaran el puntaje respectivo
(define sumar_puntos 0)
(define ver_puntos 0)
;----------------------------------------------------------------------------------------------------
;se define una funcion para validar la matriz y evitar que el pacman pase atravez de los muros
(define (validar vec x y valor)                                                   
               (if(=(vector-ref (vector-ref vec y) x) valor)
                1
                0
               )
 )
;----------------------------------------------------------------------------------------------------
;se definen funciones del teclado, sonidos que se realizaran al mover el pacman en la direccion indicada
;se utiliza las funciones de puntaje y el vector para que a medida que el pacman se mueva y coma galletas
;o frutas se sumen el puntaje respectivo y se muestre en pantalla
(play-sound "intro.wav" #t)
(define (teclado posx posy press direc)
 (if (and(equal? press 'up) (=(validar matriz (quotient posx 53)(-(quotient posy 40)1)0)1))
  (begin
    ((draw-solid-rectangle ventana)(make-posn posx posy) 53 40 "black")
    (play-sound "fruta.wav" #t)
    (pacman posx (-  posy 40)'u)
    ((draw-solid-rectangle ventana)(make-posn 64 607)25 25 "black")
    (vector-set! aciertos 0 (+ (vector-ref aciertos 0) 10))
    ((draw-string ventana)(make-posn 64 618)(number->string (vector-ref aciertos 0)))
    (teclado posx (- posy 40) (key-value (get-key-press ventana) )(display 8 )))
  

  
   (if (and(equal? press 'up) (=(validar matriz (quotient posx 53)(-(quotient posy 40)1)3)1))
  (begin
    ((draw-solid-rectangle ventana)(make-posn posx posy) 53 40 "black")
    (play-sound "efecto.wav" #t)
    (pacman posx (-  posy 40)'u)
    ((draw-solid-rectangle ventana)(make-posn 64 607)25 25 "black")
    (vector-set! aciertos 0 (+ (vector-ref aciertos 0) 50))
    ((draw-string ventana)(make-posn 64 618)(number->string (vector-ref aciertos 0)))
    (teclado posx (- posy 40) (key-value (get-key-press ventana) )(display 3 )))
  
  (if (and(equal? press 'down)(=(validar matriz (quotient posx 53)(+(quotient posy 40)1)0)1))
  (begin
    ((draw-solid-rectangle ventana)(make-posn posx posy) 53 40 "black")
    (play-sound "fruta.wav" #t)
    (pacman posx (+ posy 40) 'd )
    ((draw-solid-rectangle ventana)(make-posn 64 607)25 25 "black")
    (vector-set! aciertos 0 (+ (vector-ref aciertos 0) 10))
    ((draw-string ventana)(make-posn 64 618)(number->string (vector-ref aciertos 0)))
    (teclado posx (+ posy 40) (key-value (get-key-press ventana)) (display 2)))
  
   (if (and(equal? press 'down)(=(validar matriz (quotient posx 53)(+(quotient posy 40)1)3)1))
  (begin
    ((draw-solid-rectangle ventana)(make-posn posx posy) 53 40 "black")
    (play-sound "efecto.wav" #t)
    (pacman posx (+ posy 40) 'd )
    ((draw-solid-rectangle ventana)(make-posn 64 607)25 25 "black")
    (vector-set! aciertos 0 (+ (vector-ref aciertos 0) 50))
    ((draw-string ventana)(make-posn 64 618)(number->string (vector-ref aciertos 0)))
    (teclado posx (+ posy 40) (key-value (get-key-press ventana)) (display 3)))
     
  (if (and(equal? press 'left)(=(validar matriz (-(quotient posx 53)1)(quotient posy 40)0)1))
  (begin  
    ((draw-solid-rectangle ventana)(make-posn posx posy) 53 40 "black")
    (play-sound "fruta.wav" #t)
    (pacman (-  posx 53 ) posy 'l )
    ((draw-solid-rectangle ventana)(make-posn 64 607)25 25 "black")
    (vector-set! aciertos 0 (+ (vector-ref aciertos 0) 10))
    ((draw-string ventana)(make-posn 64 618)(number->string (vector-ref aciertos 0)))
    (teclado (-  posx 53 )posy (key-value (get-key-press ventana))(display 4 )))
  
  (if (and(equal? press 'left) (=(validar matriz (-(quotient posx 53)1)(quotient posy 40)4)1))
  (begin
    ((draw-solid-rectangle ventana)(make-posn posx posy) 53 40 "black")
     (play-sound "fruta.wav" #t)
    (pacman (+  posx 636 ) posy'l)
    (teclado (+  posx 636 ) posy (key-value (get-key-press ventana) )(display 7 )))
  
  (if (and(equal? press 'left)(=(validar matriz (-(quotient posx 53)1)(quotient posy 40)3)1))
  (begin 
    ((draw-solid-rectangle ventana)(make-posn posx posy) 53 40 "black")
    (play-sound "efecto.wav" #t)
    (pacman (-  posx 53 ) posy 'l )
    ((draw-solid-rectangle ventana)(make-posn 64 607)25 25 "black")
    (vector-set! aciertos 0 (+ (vector-ref aciertos 0) 50))
    ((draw-string ventana)(make-posn 64 618)(number->string (vector-ref aciertos 0)))
    (teclado (-  posx 53 )posy (key-value (get-key-press ventana))(display 3 )))
    

  (if (and(equal? press 'right)(=(validar matriz (+(quotient posx 53)1)(quotient posy 40)0)1))
   (begin
     ((draw-solid-rectangle ventana)(make-posn posx posy) 53 40 "black")
     (play-sound "fruta.wav" #t)
     (pacman (+ posx 53) posy 'r )
     ((draw-solid-rectangle ventana)(make-posn 64 607)25 25 "black")
    (vector-set! aciertos 0 (+ (vector-ref aciertos 0) 10))
    ((draw-string ventana)(make-posn 64 618)(number->string (vector-ref aciertos 0)))
     (teclado (+ posx 53) posy (key-value (get-key-press ventana))(display 6 )))
   
    (if (and(equal? press 'right)(=(validar matriz (+(quotient posx 53)1)(quotient posy 40)6)1))
   (begin
     ((draw-solid-rectangle ventana)(make-posn posx posy) 53 40 "black")
      (play-sound "fruta.wav" #t)
     (pacman (- posx 636) posy 'r )
     (teclado (- posx 636) posy (key-value (get-key-press ventana))(display 9 )))

   (if (and(equal? press 'right)(=(validar matriz (+(quotient posx 53)1)(quotient posy 40)3)1))
   (begin
     ((draw-solid-rectangle ventana)(make-posn posx posy) 53 40 "black")
     (play-sound "efecto.wav" #t)
     (pacman (+ posx 53) posy 'r )
     ((draw-solid-rectangle ventana)(make-posn 64 607)25 25 "black")
    (vector-set! aciertos 0 (+ (vector-ref aciertos 0) 50))
    ((draw-string ventana)(make-posn 64 618)(number->string (vector-ref aciertos 0)))
     (teclado (+ posx 53) posy (key-value (get-key-press ventana))(display 3 )))
     
  ;else

  (teclado  posx posy (key-value (get-key-press ventana)) direc )

  
  )
  )
  ) 
 )
  )


)
  )))))


(teclado 53 40 'd 0)



